# SGDK Makefile
# This makefile is responsible for compiling the Sega Mega Drive project
# using the SGDK (Sega Genesis Development Kit).

# --- Shell and Build Tools ---
# Specifies the shell to be used for executing makefile commands.
SHELL=/bin/sh
# Specifies the C compiler (GCC for m68k target).
CC=gcc
# Specifies the assembler (AS for m68k target).
AS=as
# Specifies the linker (LD for m68k target).
LD=ld

# --- SGDK Configuration ---
# SGDK_BASE_DIR: Path to the root of your SGDK installation.
# This makefile attempts to automatically detect SGDK_BASE_DIR if the GENDEV
# environment variable is set (a common setup for SGDK users).
# If GENDEV is not set, or if your SGDK installation is elsewhere,
# you might need to manually set SGDK_BASE_DIR here or as an environment variable.
# Example: SGDK_BASE_DIR=/opt/gendev/sgdk
SGDK_BASE_DIR?=$(GENDEV)/sgdk

# SGDK_INCLUDE: Path to SGDK's main include directory.
SGDK_INCLUDE=$(SGDK_BASE_DIR)/inc
# SGDK_LIB: Path to SGDK's precompiled library (libmd.a).
SGDK_LIB=$(SGDK_BASE_DIR)/lib/libmd.a

# --- Project Specific Configuration ---
# APP_NAME: The base name for the output ROM file (e.g., rom.bin).
APP_NAME=rom
# OBJ_DIR: Directory to store compiled object files (.o).
OBJ_DIR=obj
# SRC_DIR: Directory containing your project's source files (.c, .s, .S).
SRC_DIR=src
# INC_DIR: Directory containing your project's header files (.h).
INC_DIR=inc
# OUT_DIR: Directory where the final ROM and other output files will be placed.
OUT_DIR=out
# RES_DIR: Directory containing game assets (graphics, sound, resource definitions).
RES_DIR=res

# --- SGDK Resource Compiler (rescomp) Configuration ---
# RESCOMP: Path to the SGDK resource compiler executable.
RESCOMP = $(SGDK_BASE_DIR)/bin/rescomp
# RES_FILE: Path to your project's resource definition file (.res).
RES_FILE = $(RES_DIR)/resources.res
# RES_HEADER: Path to the header file generated by rescomp (contains resource definitions).
RES_HEADER = $(INC_DIR)/resources.h
# RES_SRC_OUTPUT: Path to the C source file generated by rescomp (contains resource data).
RES_SRC_OUTPUT = $(SRC_DIR)/resources.c
# RES_OBJ: Path to the object file compiled from the generated resources.c.
RES_OBJ = $(OBJ_DIR)/resources.o

# --- Source File Discovery ---
# C_SRCS: Finds all .c files in the SRC_DIR.
C_SRCS = $(wildcard $(SRC_DIR)/*.c)
# S_SRCS: Finds all .s (assembly) and .S (assembly with preprocessor) files in SRC_DIR.
S_SRCS = $(wildcard $(SRC_DIR)/*.s) $(wildcard $(SRC_DIR)/*.S)

# Filter out the generated resources.c from C_SRCS to avoid listing it twice
# if it happens to be picked up by the wildcard and also explicitly added.
C_SRCS_USER = $(filter-out $(RES_SRC_OUTPUT), $(C_SRCS))

# OBJS: List of all object files to be created.
# This includes:
# - Object files from user-written .c files.
# - Object files from user-written .s and .S assembly files.
# - The object file from the rescomp-generated resources.c.
OBJS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(C_SRCS_USER)) \
       $(patsubst $(SRC_DIR)/%.s, $(OBJ_DIR)/%.o, $(S_SRCS)) \
       $(patsubst $(SRC_DIR)/%.S, $(OBJ_DIR)/%.o, $(filter %.S, $(S_SRCS))) \
       $(RES_OBJ)

# --- Compiler and Linker Flags ---
# INCS: Include paths for the compiler.
# -I$(INC_DIR): Project's include directory.
# -I$(SGDK_INCLUDE): SGDK's main include directory.
# -I$(SGDK_BASE_DIR)/mdk/include: SGDK's machine development kit includes.
INCS=-I$(INC_DIR) -I$(SGDK_INCLUDE) -I$(SGDK_BASE_DIR)/mdk/include

# CFLAGS: Flags passed to the C compiler.
# -m68000: Target Motorola 68000 processor.
# -Wall -Wextra: Enable most common warnings.
# -O1: Optimization level 1 (balances code size and performance).
# -fomit-frame-pointer: Optimizes function calls (can make debugging harder).
# -nostdlib: Do not use standard C libraries (SGDK provides its own).
# -ffreestanding: For environments without a standard OS.
# $(INCS): Include paths defined above.
CFLAGS=-m68000 -Wall -Wextra -O1 -fomit-frame-pointer -nostdlib -ffreestanding $(INCS)

# ASFLAGS: Flags passed to the assembler.
# -m68000: Target Motorola 68000 processor.
# --register-prefix-optional: Allows omitting '%' prefix for registers (common in SGDK examples).
ASFLAGS=-m68000 --register-prefix-optional

# LFLAGS: Flags passed to the linker.
# -T $(SGDK_BASE_DIR)/mdk/ldscripts/md.ld: Use SGDK's linker script for Mega Drive.
# -nostdlib: Do not link standard libraries.
# $(SGDK_LIB): Link against SGDK's main library.
LFLAGS=-T $(SGDK_BASE_DIR)/mdk/ldscripts/md.ld -nostdlib $(SGDK_LIB)

# --- Output Configuration ---
# ROM: Path to the final ROM file to be generated.
ROM=$(OUT_DIR)/$(APP_NAME).bin

# --- Makefile Targets ---

# Default target: 'all'
# This is executed when 'make' is run without specifying a target.
# It depends on $(ROM) and then runs 'check_sgdk_env'.
all: $(ROM)
	$(MAKE) -s check_sgdk_env --no-print-directory

# Rule to link the final ROM file.
# Depends on all object files $(OBJS).
$(ROM): $(OBJS)
	@mkdir -p $(OUT_DIR) # Create output directory if it doesn't exist.
	@echo "Linking $(ROM)..."
	# Link object files into an ELF file (intermediate).
	$(CC) $(CFLAGS) -o $(OUT_DIR)/$(APP_NAME).elf $(OBJS) $(LFLAGS)
	# Convert ELF file to binary ROM using SGDK's sizebnd tool (pads to valid ROM size).
	$(SGDK_BASE_DIR)/bin/sizebnd $(OUT_DIR)/$(APP_NAME).elf $(OUT_DIR)/$(APP_NAME).bin
	@rm -f $(OUT_DIR)/$(APP_NAME).elf # Remove intermediate ELF file.
	@echo "Build complete: $(ROM)"

# Rule for compiling resources using rescomp.
# This rule generates $(RES_HEADER) (e.g., inc/resources.h) and
# $(RES_SRC_OUTPUT) (e.g., src/resources.c).
# It depends on the main resource file $(RES_FILE) and any files in `res/gfx/`
# (or other asset subdirectories listed here, e.g., `res/sfx/*.*`).
# Adding `$(wildcard $(RES_DIR)/sfx/*.*)` would make it depend on sfx files too.
$(RES_SRC_OUTPUT) $(RES_HEADER): $(RES_FILE) $(wildcard $(RES_DIR)/gfx/*.*) $(wildcard $(RES_DIR)/sfx/*.*)
	@echo "Compiling resources $< (from $(RES_FILE))..."
	$(RESCOMP) $(RES_FILE) $(RES_HEADER) $(RES_SRC_OUTPUT)

# Rule for compiling the rescomp-generated C source file ($(RES_SRC_OUTPUT)).
# Depends on the generated C file and its header.
$(OBJ_DIR)/resources.o: $(RES_SRC_OUTPUT) $(RES_HEADER)
	@mkdir -p $(OBJ_DIR) # Create object directory if it doesn't exist.
	@echo "Compiling (generated) $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Rule for compiling user-written C source files.
# %.o: A pattern rule that matches any .o file in OBJ_DIR.
# %.c: The corresponding .c file in SRC_DIR.
# Depends on the source .c file and the rescomp-generated header $(RES_HEADER),
# as user C files might include resources.h.
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c $(RES_HEADER)
	@mkdir -p $(OBJ_DIR)
	@echo "Compiling $<..."
	$(CC) $(CFLAGS) -c $< -o $@ # -c: compile only (don't link), -o $@: output to target name.

# Rule for assembling .s files (assembly without preprocessor).
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.s
	@mkdir -p $(OBJ_DIR)
	@echo "Assembling $<..."
	$(AS) $(ASFLAGS) $< -o $@

# Rule for assembling .S files (assembly with C preprocessor).
# Note: SGDK examples often use .S for files that need preprocessing.
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.S
	@mkdir -p $(OBJ_DIR)
	@echo "Assembling $<..."
	$(AS) $(ASFLAGS) $< -o $@ # The C preprocessor is usually invoked automatically by gcc if needed,
	                          # but for direct assembly, this might need adjustment if
	                          # preprocessing is explicitly required before 'as'.
	                          # Often, .S files are compiled with $(CC) which handles preprocessing.
	                          # If direct 'as' is used, ensure flags are correct or use $(CC).

# Target to clean build files.
# Removes the object directory, output directory, and rescomp-generated files.
clean:
	@echo "Cleaning build files..."
	rm -rf $(OBJ_DIR) $(OUT_DIR)
	rm -f $(RES_HEADER) $(RES_SRC_OUTPUT) $(RES_OBJ)

# Target to check if SGDK_BASE_DIR is set.
# If not set, it prints an error message.
check_sgdk_env:
ifndef SGDK_BASE_DIR
	$(error SGDK_BASE_DIR is not set. Please set it to your SGDK installation path, or ensure GENDEV is set.)
endif

# Phony targets: These are targets that don't represent actual files.
# 'all', 'clean', and 'check_sgdk_env' are common phony targets.
.PHONY: all clean check_sgdk_env

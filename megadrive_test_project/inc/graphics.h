/**
 * @file graphics.h
 * @brief Header file for graphics rendering functions.
 *
 * This module is responsible for initializing and updating graphical elements
 * such as tilemaps and sprites. It provides functions to load assets,
 * display them, and handle sprite-specific logic like movement.
 */
#ifndef GRAPHICS_H
#define GRAPHICS_H

#include <genesis.h> // SGDK general header

// Forward declaration for sprite resource (if you plan to put it here)
// extern const SpriteDefinition spr_player; // Example for later.
// The actual sprite definition (spr_player) is made available through "resources.h"
// which is generated by SGDK's rescomp tool from "resources.res".

// --- Tile Display Functions ---
// These functions demonstrate how to load and display tile-based backgrounds.
// They are currently not called in the main demo loop in main.c but are functional.

/**
 * @brief Loads a simple tileset into VRAM.
 *
 * This function loads tile data (defined in `my_tileset` from `resources.h`,
 * which is compiled from `res/gfx/tileset.png`) into the VDP's VRAM.
 * It also loads the associated palette for the tileset.
 * The tiles are loaded starting at `TILE_USER_INDEX`.
 */
void load_simple_tileset();

/**
 * @brief Displays a predefined simple tilemap on background plane A (BG_A).
 *
 * This function clears BG_A and then iterates through a 2D array (`simple_map`
 * defined in `graphics.c`) to draw tiles onto the screen.
 * It uses `VDP_setTileMapXY` to place individual tiles.
 */
void display_simple_tilemap();


// --- Sprite Functions ---

/**
 * @brief Initializes the sprite system and sets up the player sprite.
 *
 * This function performs the following:
 * - Initializes the SGDK sprite engine (`SPR_init()`).
 * - Loads the palette for the player sprite (`spr_player.palette`) into `PAL1`.
 * - Adds the player sprite (`spr_player`) to the display list using `SPR_addSprite()`.
 * - Sets the initial animation frame for the player sprite.
 * - Calls `init_sound_system()` to prepare the sound module (can also be called from main).
 * - Calls `input_init()` to prepare the input module (can also be called from main).
 */
void setup_sprites();

/**
 * @brief Updates sprite logic, including player movement and animation.
 *
 * This function should be called once per game loop. It handles:
 * - Reading controller input to move the player sprite (`player_x`, `player_y`).
 * - Keeping the player sprite within screen boundaries.
 * - Triggering a sound effect if Button A is pressed.
 * - Calling `update_player_animation()` to advance the player's animation frame.
 * - Calling `SPR_update()` to commit all sprite changes to the VDP.
 */
void update_sprites_example();

#endif // GRAPHICS_H
